from tvm.script import tir as T, ir as I
@I.ir_module
class Module:
    @T.prim_func
    def default_function(B: T.Buffer((T.int64(4096), T.int64(4096)), "float16"), A: T.Buffer((T.int64(6), T.int64(512), T.int64(4096)), "float16"), var_compute_intermediate: T.Buffer((T.int64(6), T.int64(512), T.int64(4096)), "float16")):
        T.func_attr({"tir.is_scheduled": 1, "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for blockIdx_z in T.thread_binding(T.int64(1), thread="blockIdx.z"):
            for blockIdx_y in T.thread_binding(T.int64(24), thread="blockIdx.y"):
                for blockIdx_x in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                    for threadIdx_y in T.thread_binding(T.int64(2), thread="threadIdx.y"):
                        for threadIdx_z in T.thread_binding(T.int64(2), thread="threadIdx.z"):
                            for threadIdx_x in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block(""):
                                    T.reads(A[blockIdx_y // T.int64(4), blockIdx_y % T.int64(4) * T.int64(128):blockIdx_y % T.int64(4) * T.int64(128) + T.int64(128), T.int64(0):T.int64(4096)], B[blockIdx_x * T.int64(128):blockIdx_x * T.int64(128) + T.int64(128), T.int64(0):T.int64(4096)])
                                    T.writes(var_compute_intermediate[blockIdx_y // T.int64(4), blockIdx_y % T.int64(4) * T.int64(128):blockIdx_y % T.int64(4) * T.int64(128) + T.int64(128), blockIdx_x * T.int64(128):blockIdx_x * T.int64(128) + T.int64(128)])
                                    p_output0_intermediate_reindex_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(8), T.int64(8), T.int64(16), T.int64(16)), scope="shared.dyn")
                                    p_output0_intermediate_reindex_shared_dyn_wmma_accumulator = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(16), T.int64(16)), scope="wmma.accumulator")
                                    for ax1_0_2_init, ax2_0_2_init in T.grid(T.int64(4), T.int64(4)):
                                        with T.block("matmul_o_init"):
                                            T.reads()
                                            T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2_init, ax2_0_2_init, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            with T.block("matmul_init_o"):
                                                T.reads()
                                                T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2_init, ax2_0_2_init, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                T.tvm_fill_fragment(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, 16, 16, 16, ax1_0_2_init * T.int64(4) + ax2_0_2_init, T.float32(0))
                                    with T.block(""):
                                        T.reads(A[(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512):(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512) + (((blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512) + T.int64(96)) // T.int64(512) + T.int64(1)), T.int64(0):T.int64(512), threadIdx_x % T.int64(4) * T.int64(8):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(4072)], B[blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4):blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4) + T.int64(97), threadIdx_x % T.int64(4) * T.int64(8):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(4072)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                        T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                        A_reindex_shared_dyn = T.alloc_buffer((4, T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(16), T.int64(16)), "float16", strides=(T.int64(6144), T.int64(6144), T.int64(6144), T.int64(768), T.int64(384), T.int64(24), T.int64(1)), scope="shared.dyn")
                                        var_T_transpose_intermediate_reindex_shared_dyn = T.alloc_buffer((4, T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(16), T.int64(16)), "float16", strides=(T.int64(6144), T.int64(6144), T.int64(6144), T.int64(768), T.int64(384), T.int64(24), T.int64(1)), scope="shared.dyn")
                                        with T.block(""):
                                            T.reads(A[(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512):(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512) + (((blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512) + T.int64(96)) // T.int64(512) + T.int64(1)), T.int64(0):T.int64(512), threadIdx_x % T.int64(4) * T.int64(8):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(72)], B[blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4):blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4) + T.int64(97), threadIdx_x % T.int64(4) * T.int64(8):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(72)])
                                            T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)])
                                            for ax3_0_0 in T.unroll(T.int64(3)):
                                                with T.block(""):
                                                    T.where(ax3_0_0 < T.int64(128))
                                                    T.reads(A[(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512):(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512) + (((blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512) + T.int64(96)) // T.int64(512) + T.int64(1)), T.int64(0):T.int64(512), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8):ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(8)], B[blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4):blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4) + T.int64(97), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8):ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(8)])
                                                    T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)])
                                                    T.attr(0, "async_commit_queue_scope", 0)
                                                    with T.attr(0, "async_scope", 1):
                                                        for ax0_ax1_fused_0 in range(T.int64(4)):
                                                            for ax0_ax1_fused_4 in T.vectorized(T.int64(8)):
                                                                with T.block("A_reindex_shared.dyn"):
                                                                    T.reads(A[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4])
                                                                    T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
                                                                    T.block_attr({"buffer_dim_align": [[0, 4, 16, 8]]})
                                                                    A_reindex_shared_dyn[ax3_0_0 % T.int64(4), T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4] = A[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4]
                                                    T.attr(0, "async_scope", 1)
                                                    for ax0_ax1_fused_0 in range(T.int64(4)):
                                                        for ax0_ax1_fused_4 in T.vectorized(T.int64(8)):
                                                            with T.block("var_T_transpose_intermediate_reindex_shared.dyn"):
                                                                T.reads(B[blockIdx_x * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4])
                                                                T.writes(var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
                                                                T.block_attr({"buffer_dim_align": [[0, 4, 16, 8]]})
                                                                var_T_transpose_intermediate_reindex_shared_dyn[ax3_0_0 % T.int64(4), T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4] = B[blockIdx_x * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4]
                                        with T.block(""):
                                            T.reads(A[(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512):(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512) + (((blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512) + T.int64(96)) // T.int64(512) + T.int64(1)), T.int64(0):T.int64(512), threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96) + T.int64(3976)], B[blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4):blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4) + T.int64(97), threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96):threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96) + T.int64(3976)], A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            for ax3_0_0 in range(T.int64(125)):
                                                with T.block(""):
                                                    T.where(ax3_0_0 + T.int64(3) < T.int64(128))
                                                    T.reads(A[(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512):(blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512) + (((blockIdx_y * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512) + T.int64(96)) // T.int64(512) + T.int64(1)), T.int64(0):T.int64(512), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96):ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96) + T.int64(8)], B[blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4):blockIdx_x * T.int64(128) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4) + T.int64(97), ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96):ax3_0_0 * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + T.int64(96) + T.int64(8)])
                                                    T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z:threadIdx_z + T.int64(7), threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8):threadIdx_x % T.int64(2) * T.int64(8) + T.int64(8)])
                                                    T.attr(0, "async_commit_queue_scope", 0)
                                                    with T.attr(0, "async_scope", 1):
                                                        for ax0_ax1_fused_0 in range(T.int64(4)):
                                                            for ax0_ax1_fused_4 in T.vectorized(T.int64(8)):
                                                                with T.block("A_reindex_shared.dyn"):
                                                                    T.reads(A[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512), (ax3_0_0 + T.int64(3)) * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4])
                                                                    T.writes(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
                                                                    T.block_attr({"buffer_dim_align": [[0, 4, 16, 8]]})
                                                                    A_reindex_shared_dyn[(ax3_0_0 + T.int64(3)) % T.int64(4), T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4] = A[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4)) % T.int64(512), (ax3_0_0 + T.int64(3)) * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4]
                                                    T.attr(0, "async_scope", 1)
                                                    for ax0_ax1_fused_0 in range(T.int64(4)):
                                                        for ax0_ax1_fused_4 in T.vectorized(T.int64(8)):
                                                            with T.block("var_T_transpose_intermediate_reindex_shared.dyn"):
                                                                T.reads(B[blockIdx_x * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), (ax3_0_0 + T.int64(3)) * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4])
                                                                T.writes(var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
                                                                T.block_attr({"buffer_dim_align": [[0, 4, 16, 8]]})
                                                                var_T_transpose_intermediate_reindex_shared_dyn[(ax3_0_0 + T.int64(3)) % T.int64(4), T.int64(0), T.int64(0), ax0_ax1_fused_0 * T.int64(2) + threadIdx_z, threadIdx_x % T.int64(4) // T.int64(2), threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4] = B[blockIdx_x * T.int64(128) + ax0_ax1_fused_0 * T.int64(32) + threadIdx_z * T.int64(16) + threadIdx_y * T.int64(8) + threadIdx_x // T.int64(4), (ax3_0_0 + T.int64(3)) * T.int64(32) + threadIdx_x % T.int64(4) * T.int64(8) + ax0_ax1_fused_4]
                                                with T.block(""):
                                                    T.where(ax3_0_0 + T.int64(3) - T.int64(3) < T.int64(128))
                                                    T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                    T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                    T.attr(0, "async_wait_queue_scope", 0)
                                                    T.attr(0, "async_wait_inflight_count", T.int64(3))
                                                    for ax3_0_1 in range(T.int64(2)):
                                                        with T.block(""):
                                                            T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                            T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                            A_reindex_shared_dyn_wmma_matrix_a = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(16)), "float16", scope="wmma.matrix_a")
                                                            var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(16)), "float16", scope="wmma.matrix_b")
                                                            for ax0 in range(T.int64(4)):
                                                                with T.block("A_reindex_shared.dyn_wmma.matrix_a_o"):
                                                                    T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4) + ax0, ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax0, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.tvm_load_matrix_sync(A_reindex_shared_dyn_wmma_matrix_a.data, 16, 16, 16, ax0, T.tvm_access_ptr(T.type_annotation("float16"), A_reindex_shared_dyn.data, threadIdx_z * T.int64(3072) + ax0 * T.int64(768) + ax3_0_1 * T.int64(384) + (ax3_0_0 - T.int64(3) + T.int64(3)) % T.int64(4) * T.int64(6144), T.int64(384), 1), T.int64(24), "row_major")
                                                            for ax0 in range(T.int64(4)):
                                                                with T.block("var_T_transpose_intermediate_reindex_shared.dyn_wmma.matrix_b_o"):
                                                                    T.reads(var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4) + ax0, ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax0, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.tvm_load_matrix_sync(var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b.data, 16, 16, 16, ax0, T.tvm_access_ptr(T.type_annotation("float16"), var_T_transpose_intermediate_reindex_shared_dyn.data, threadIdx_y * T.int64(3072) + ax0 * T.int64(768) + ax3_0_1 * T.int64(384) + (ax3_0_0 - T.int64(3) + T.int64(3)) % T.int64(4) * T.int64(6144), T.int64(384), 1), T.int64(24), "col_major")
                                                            for ax1_0_2, ax2_0_2 in T.grid(T.int64(4), T.int64(4)):
                                                                with T.block("matmul_o_update"):
                                                                    T.reads(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax1_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax2_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    with T.block("matmul_o"):
                                                                        T.reads(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax1_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax2_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                        T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                        T.tvm_mma_sync(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, ax1_0_2 * T.int64(4) + ax2_0_2, A_reindex_shared_dyn_wmma_matrix_a.data, ax1_0_2, var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b.data, ax2_0_2, p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, ax1_0_2 * T.int64(4) + ax2_0_2)
                                        with T.block(""):
                                            T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            for ax3_0_0 in T.unroll(T.int64(3)):
                                                with T.block(""):
                                                    T.where(ax3_0_0 + T.int64(128) - T.int64(3) < T.int64(128))
                                                    T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), T.int64(0):T.int64(2), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                    T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                    T.attr(0, "async_wait_queue_scope", 0)
                                                    T.attr(0, "async_wait_inflight_count", T.int64(2) - ax3_0_0)
                                                    for ax3_0_1 in range(T.int64(2)):
                                                        with T.block(""):
                                                            T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4):threadIdx_z * T.int64(4) + T.int64(4), ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4):threadIdx_y * T.int64(4) + T.int64(4), ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                            T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), T.int64(0):T.int64(4), T.int64(0):T.int64(4), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                            A_reindex_shared_dyn_wmma_matrix_a = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(16)), "float16", scope="wmma.matrix_a")
                                                            var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(16)), "float16", scope="wmma.matrix_b")
                                                            for ax0 in range(T.int64(4)):
                                                                with T.block("A_reindex_shared.dyn_wmma.matrix_a_o"):
                                                                    T.reads(A_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_z * T.int64(4) + ax0, ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax0, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.tvm_load_matrix_sync(A_reindex_shared_dyn_wmma_matrix_a.data, 16, 16, 16, ax0, T.tvm_access_ptr(T.type_annotation("float16"), A_reindex_shared_dyn.data, threadIdx_z * T.int64(3072) + ax0 * T.int64(768) + ax3_0_1 * T.int64(384) + (ax3_0_0 - T.int64(3) + T.int64(128)) % T.int64(4) * T.int64(6144), T.int64(384), 1), T.int64(24), "row_major")
                                                            for ax0 in range(T.int64(4)):
                                                                with T.block("var_T_transpose_intermediate_reindex_shared.dyn_wmma.matrix_b_o"):
                                                                    T.reads(var_T_transpose_intermediate_reindex_shared_dyn[0:4, T.int64(0), T.int64(0), threadIdx_y * T.int64(4) + ax0, ax3_0_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax0, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.tvm_load_matrix_sync(var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b.data, 16, 16, 16, ax0, T.tvm_access_ptr(T.type_annotation("float16"), var_T_transpose_intermediate_reindex_shared_dyn.data, threadIdx_y * T.int64(3072) + ax0 * T.int64(768) + ax3_0_1 * T.int64(384) + (ax3_0_0 - T.int64(3) + T.int64(128)) % T.int64(4) * T.int64(6144), T.int64(384), 1), T.int64(24), "col_major")
                                                            for ax1_0_2, ax2_0_2 in T.grid(T.int64(4), T.int64(4)):
                                                                with T.block("matmul_o_update"):
                                                                    T.reads(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax1_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax2_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                    with T.block("matmul_o"):
                                                                        T.reads(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)], A_reindex_shared_dyn_wmma_matrix_a[T.int64(0), T.int64(0), ax1_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)], var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b[T.int64(0), T.int64(0), ax2_0_2, T.int64(0), T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                        T.writes(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax1_0_2, ax2_0_2, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                                                        T.tvm_mma_sync(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, ax1_0_2 * T.int64(4) + ax2_0_2, A_reindex_shared_dyn_wmma_matrix_a.data, ax1_0_2, var_T_transpose_intermediate_reindex_shared_dyn_wmma_matrix_b.data, ax2_0_2, p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, ax1_0_2 * T.int64(4) + ax2_0_2)
                                    for ax0, ax1, ax2_1, ax3_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                                        with T.block("p_output0_intermediate_reindex_shared.dyn_wmma.accumulator_o"):
                                            T.reads(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator[T.int64(0), T.int64(0), ax2_1, ax3_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            T.writes(p_output0_intermediate_reindex_shared_dyn[T.int64(0), T.int64(0), threadIdx_z * T.int64(4) + ax2_1, threadIdx_y * T.int64(4) + ax3_1, T.int64(0):T.int64(16), T.int64(0):T.int64(16)])
                                            T.tvm_store_matrix_sync(p_output0_intermediate_reindex_shared_dyn_wmma_accumulator.data, 16, 16, 16, ax2_1 * T.int64(4) + ax3_1, T.tvm_access_ptr(T.type_annotation("float32"), p_output0_intermediate_reindex_shared_dyn.data, threadIdx_z * T.int64(8192) + ax2_1 * T.int64(2048) + threadIdx_y * T.int64(1024) + ax3_1 * T.int64(256), T.int64(256), 2), T.int64(16), "row_major")
                                    for ax0_ax1_fused_0 in range(T.int64(16)):
                                        for ax0_ax1_fused_4 in T.vectorized(T.int64(8)):
                                            with T.block("p_output0_intermediate_reindex_shared.dyn"):
                                                T.reads(p_output0_intermediate_reindex_shared_dyn[T.int64(0), T.int64(0), (ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) // T.int64(16), threadIdx_x % T.int64(16) // T.int64(2), (ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) % T.int64(16), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
                                                T.writes(var_compute_intermediate[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) % T.int64(512), blockIdx_x * T.int64(128) + threadIdx_x % T.int64(16) * T.int64(8) + ax0_ax1_fused_4])
                                                var_compute_intermediate[(blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) // T.int64(512), (blockIdx_y * T.int64(128) + ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) % T.int64(512), blockIdx_x * T.int64(128) + threadIdx_x % T.int64(16) * T.int64(8) + ax0_ax1_fused_4] = T.Cast("float16", p_output0_intermediate_reindex_shared_dyn[T.int64(0), T.int64(0), (ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) // T.int64(16), threadIdx_x % T.int64(16) // T.int64(2), (ax0_ax1_fused_0 * T.int64(8) + threadIdx_z * T.int64(4) + threadIdx_y * T.int64(2) + threadIdx_x // T.int64(16)) % T.int64(16), threadIdx_x % T.int64(2) * T.int64(8) + ax0_ax1_fused_4])
Module.show()
